{"version":3,"sources":["GlobalStyle.tsx","atoms.tsx","Components/CreateToDos.tsx","Components/ToDo.tsx","ToDoList.tsx","App.tsx","index.tsx","Themes.tsx"],"names":["GlobalStyle","createGlobalStyle","props","theme","bgColor","toDoState","atom","key","default","categoryState","categoryStorage","todoSelector","selector","get","options","toDos","categoryState123","filter","todo","category","CreateToDo","setToDos","useSetRecoilState","categoryState1","useRecoilValue","useForm","register","handleSubmit","setValue","useRecoilState","categoryStore","storeCategory","useEffect","console","log","onSubmit","toDo","categoryInput","oldToDos","text","id","Date","now","current","required","placeholder","ToDo","setTodos","categoryList","onClick","event","name","currentTarget","findIndex","oldTodo","index","slice","style","color","map","categoryItem","ToDoList","setCategory","categorizdToDos","toDoData","localStorage","getItem","categoryData","JsonCategories","JSON","parse","JsonTodoData","setItem","stringify","onInput","value","item","App","queryClient","QueryClient","ReactDOM","render","StrictMode","fontColor","client","initialIsOpen","document","getElementById"],"mappings":"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","file":"static/js/main.c8cb8dcf.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\nbody {\r\n  background-color: ${(props) => props.theme?.bgColor}\r\n  padding: 10px;\r\n  font-family: 'Raleway', sans-serif;\r\n\r\n}\r\na {\r\n  color: inherit;\r\n  text-decoration: none;\r\n  display: block;\r\n}\r\n`;\r\n","import { atom, selector } from \"recoil\";\r\n\r\nexport interface IToDo {\r\n  text: string;\r\n  id: number;\r\n  category: string;\r\n}\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: \"toDo\",\r\n  default: [],\r\n});\r\n\r\nexport const categoryState = atom<string>({\r\n  key: \"categoryState\",\r\n  default: \"TO_DO\",\r\n});\r\n\r\nexport const categoryStorage = atom<string[]>({\r\n  key: \"categoryStorage\",\r\n  default: [\"TO_DO\", \"DOING\", \"DONE\"],\r\n});\r\n\r\nexport const todoSelector = selector<IToDo[]>({\r\n  key: \"toDoSelector\",\r\n  get: (options) => {\r\n    const toDos = options.get(toDoState);\r\n\r\n    const categoryState123 = options.get(categoryState);\r\n    // 여기서 categoryState의 값에 따라서 다른 toDo를 return해주면.\r\n    // 굳이 3개의 배열이나 return해줄 이유가 없다는 것이다.\r\n    return toDos?.filter((todo) => todo.category === categoryState123);\r\n  },\r\n});\r\n","import { useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { categoryState, categoryStorage, toDoState } from \"../atoms\";\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n  categoryInput: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const categoryState1 = useRecoilValue(categoryState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const [categoryStore, storeCategory] = useRecoilState(categoryStorage);\r\n\r\n  useEffect(() => {\r\n    console.log(categoryStore);\r\n  }, [categoryStore]);\r\n  const handleValid = ({ toDo, categoryInput }: IForm) => {\r\n    setToDos((oldToDos) => [\r\n      {\r\n        text: toDo,\r\n        id: Date.now(),\r\n        category: categoryInput !== \"\" ? categoryInput : categoryState1,\r\n      },\r\n      ...oldToDos,\r\n    ]);\r\n    setValue(\"toDo\", \"\");\r\n    setValue(\"categoryInput\", \"\");\r\n    if (categoryInput !== \"\") {\r\n      storeCategory((current) => {\r\n        return [...current, categoryInput];\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit(handleValid)}>\r\n      <input\r\n        {...register(\"toDo\", {\r\n          required: \"Please write a To Do\",\r\n        })}\r\n        placeholder=\"Write a to do\"\r\n      />\r\n      <input\r\n        {...register(\"categoryInput\")}\r\n        placeholder=\"write your own categories\"\r\n      ></input>\r\n      <button>Add</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CreateToDo;\r\n","import React, { useEffect } from \"react\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { categoryStorage, IToDo, toDoState } from \"../atoms\";\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const toDos = useRecoilValue(toDoState);\r\n  const setTodos = useSetRecoilState(toDoState);\r\n  // 예전에 velopert 씨는 배열을 어떻게 수정했떠라.\r\n  const categoryList = useRecoilValue(categoryStorage);\r\n\r\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const { name } = event.currentTarget; // 이 name의 타입을 지정해주느방법은?\r\n    console.log(toDos.findIndex((todo) => todo.id === id));\r\n    setTodos((oldTodo) => {\r\n      const index = toDos.findIndex((todo) => todo.id === id);\r\n      return [\r\n        ...oldTodo.slice(0, index),\r\n        {\r\n          text,\r\n          id,\r\n          category: name as any,\r\n        },\r\n        ...oldTodo.slice(index + 1),\r\n      ];\r\n    });\r\n\r\n    // 여기서 해주면 안된다. toDos는 read-only이니까.\r\n    // const newArr = toDos.splice(1, 0, {\r\n    //   text: \"HELLO\",\r\n    //   id: 123,\r\n    //   category: \"TO_DO\",\r\n    // });\r\n\r\n    // 무엇을 해야하는가. 일단은. 버튼의 name을 가져와서\r\n    // 그 IToDo의 category를 그걸로 바꾸어주어야함.\r\n    // 한번 시도해보고 안되면 다시 하는걸로.\r\n    // 그리고 onClick 을 인자를 받는걸로 다시 시도해보자.\r\n  };\r\n\r\n  return (\r\n    <li>\r\n      <span>{text} : </span>\r\n      <span style={{ color: \"Red\" }}>{category}</span>\r\n      {categoryList.map((categoryItem) => {\r\n        if (category !== categoryItem) {\r\n          return (\r\n            <button onClick={onClick} name={categoryItem}>\r\n              {categoryItem}\r\n            </button>\r\n          );\r\n        }\r\n      })}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import React, { useEffect } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport {\r\n  categoryState,\r\n  categoryStorage,\r\n  IToDo,\r\n  todoSelector,\r\n  toDoState,\r\n} from \"./atoms\";\r\nimport CreateToDo from \"./Components/CreateToDos\";\r\nimport ToDo from \"./Components/ToDo\";\r\n\r\n// export enum CategoryType {\r\n//   \"TO_DO\" = \"TO_DO\",\r\n//   \"DOING\" = \"DOING\",\r\n//   \"DONE\" = \"DONE\",\r\n// }\r\n\r\nfunction ToDoList() {\r\n  const [toDos, setToDos] = useRecoilState(toDoState);\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const categorizdToDos = useRecoilValue(todoSelector);\r\n  const [categoryStore, storeCategory] = useRecoilState(categoryStorage);\r\n\r\n  useEffect(() => {\r\n    console.log(toDos);\r\n  }, [toDos]);\r\n\r\n  useEffect(() => {\r\n    const toDoData: any = localStorage.getItem(\"toDos\");\r\n    const categoryData: any = localStorage.getItem(\"categories\");\r\n    const JsonCategories: string[] = JSON.parse(categoryData);\r\n    const JsonTodoData: IToDo[] = JSON.parse(toDoData);\r\n    storeCategory(JsonCategories);\r\n    setToDos(JsonTodoData);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"toDos\", JSON.stringify(toDos));\r\n    localStorage.setItem(\"categories\", JSON.stringify(categoryStore));\r\n  }, [toDos, categoryStore]);\r\n\r\n  const handleInput = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    const {\r\n      currentTarget: { value },\r\n    } = event;\r\n    console.log(value);\r\n    setCategory(value as any);\r\n  };\r\n  return (\r\n    <div>\r\n      current category : {category}\r\n      <select onInput={handleInput}>\r\n        {categoryStore.map((category, index) => {\r\n          return <option key={index}>{category}</option>;\r\n        })}\r\n      </select>\r\n      <CreateToDo />\r\n      <ul>\r\n        {categorizdToDos.map((item) => {\r\n          return <ToDo key={item.id} {...item}></ToDo>;\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { atom, useRecoilState, useSetRecoilState } from \"recoil\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport ToDoList from \"./ToDoList\";\n\n// 에러 메시지를 paint 해주고 싶은데요.. errors[\"key\"].message 요런식으로. 근데 안되더라고.\n// function errorPaint() {\n//   const newArray = [];\n//   for (var name in errors) {\n//     newArray.push(errors[name]?.message);\n//   }\n//   console.log(newArray);\n//   setErrorMsg(newArray);\n// }\n\n// <\n//   {\n//     text: string;\n//     id: number;\n//     category: \"TO_DO\" | \"TO_DO_NOW\" | \"TO_DO_TMR\";\n//   }[]\n// >\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList></ToDoList>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkTheme } from \"./Themes\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <QueryClientProvider client={queryClient}>\n          <App />\n          <ReactQueryDevtools initialIsOpen={true} />\n        </QueryClientProvider>\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","export const darkTheme: { bgColor: string; fontColor: string } = {\r\n  bgColor: \"black\",\r\n  fontColor: \"white\",\r\n};\r\n\r\nexport const lightTheme: { bgColor: string; fontColor: string } = {\r\n  bgColor: \"white\",\r\n  fontColor: \"black\",\r\n};\r\n"],"sourceRoot":""}